import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const branches = ['–¶–û', '–†—ñ–≤–Ω–µ', '–ö–∏—ó–≤', '–û–¥–µ—Å–∞']
const responsiblePersons = ['–¢–µ—Ç—è–Ω–∞ –ß—É–ø—Ä–∏–Ω–∞', '–ù–∞—Ç–∞–ª—ñ—è –ñ–∏–≥–∞–Ω', '–î—ñ–∞–Ω–∞ –°–æ–ª–æ–≥—É–±']
const countries = ['–ü–æ–ª—å—â–∞', '–ß–µ—Ö—ñ—è', '–ù—ñ–º–µ—á—á–∏–Ω–∞', '–õ–∞—Ç–≤—ñ—è', '–†—É–º—É–Ω—ñ—è', '–õ–∏—Ç–≤–∞', '–£–≥–æ—Ä—â–∏–Ω–∞', '–ì—Ä–µ—Ü—ñ—è', '–ê–≤—Å—Ç—Ä—ñ—è']
const candidateCountries = ['–£–∫—Ä–∞—ó–Ω–∞', '–ë—ñ–ª–æ—Ä—É—Å—å', '–ì—Ä—É–∑—ñ—è']
const statuses = ['–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ', '–ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏—ó–∑–¥—É', '–í –¥–æ—Ä–æ–∑—ñ', '–ü—Ä–∏–±—É–≤', '–ü—Ä–∞—Ü—é—î', '–ó–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É']
const firstNames = [
  '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞–∫—Å–∏–º', '–Ü–≤–∞–Ω', '–î–º–∏—Ç—Ä–æ', '–ê–Ω–¥—Ä—ñ–π', '–°–µ—Ä–≥—ñ–π', '–í–ª–∞–¥–∏—Å–ª–∞–≤', '–ë–æ–≥–¥–∞–Ω', '–Ø—Ä–æ—Å–ª–∞–≤', '–ú–∏—Ö–∞–π–ª–æ',
  '–û–ª–µ–Ω–∞', '–ú–∞—Ä—ñ—è', '–ê–Ω–Ω–∞', '–Ü—Ä–∏–Ω–∞', '–ù–∞—Ç–∞–ª—ñ—è', '–Æ–ª—ñ—è', '–¢–µ—Ç—è–Ω–∞', '–°–≤—ñ—Ç–ª–∞–Ω–∞', '–û–∫—Å–∞–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
  '–ü–µ—Ç—Ä–æ', '–í–∞—Å–∏–ª—å', '–ì—Ä–∏–≥–æ—Ä—ñ–π', '–ü–∞–≤–ª–æ', '–†–æ–º–∞–Ω', '–í—ñ–∫—Ç–æ—Ä', '–û–ª–µ–≥', '–Ü–≥–æ—Ä', '–Æ—Ä—ñ–π', '–í–æ–ª–æ–¥–∏–º–∏—Ä'
]
const lastNames = [
  '–®–µ–≤—á–µ–Ω–∫–æ', '–ö–æ–≤–∞–ª–µ–Ω–∫–æ', '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ', '–¢–∫–∞—á–µ–Ω–∫–æ', '–ö—Ä–∞–≤—á–µ–Ω–∫–æ', '–ú–µ–ª—å–Ω–∏–∫', '–ü–µ—Ç—Ä–µ–Ω–∫–æ', '–ö–æ–≤–∞–ª—å', '–ì–æ–Ω—á–∞—Ä', '–ó–∞–π—Ü–µ–≤',
  '–Ü–≤–∞–Ω–µ–Ω–∫–æ', '–ü–∞–≤–ª–µ–Ω–∫–æ', '–ú–∞—Ä—á–µ–Ω–∫–æ', '–ë—ñ–ª–∏–π', '–°–∏–¥–æ—Ä–µ–Ω–∫–æ', '–ü–æ–ª—ñ—â—É–∫', '–ì—Ä–∏—Ü–µ–Ω–∫–æ', '–°—Ç–µ–ø–∞–Ω–µ–Ω–∫–æ', '–õ–∏—Å–µ–Ω–∫–æ', '–°–∞–≤—á–µ–Ω–∫–æ',
  '–î–º–∏—Ç—Ä–µ–Ω–∫–æ', '–†–æ–º–∞–Ω–µ–Ω–∫–æ', '–ú–æ—Ä–æ–∑–æ–≤', '–ö–æ–≤–∞–ª—å—á—É–∫', '–õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ', '–°–µ—Ä–≥—ñ—î–Ω–∫–æ', '–ú–∏—Ä–æ–Ω–æ–≤', '–§–µ–¥–æ—Ä–æ–≤', '–û–ª—ñ–π–Ω–∏–∫', '–õ–µ–≤—á–µ–Ω–∫–æ'
]
const projects = [
  'Amazon Logistics', 'DHL Express', 'Zalando Warehouse', 'BMW Factory', 'Mercedes Production',
  'Hotel Marriott', 'Lidl Distribution', 'IKEA Assembly', 'Construction Site Berlin', 'Volkswagen Plant'
]

function randomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

function randomInt(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min
}

function generatePhone(): string {
  return `+38050${randomInt(1000000, 9999999)}`
}

async function main() {
  console.log('üå± –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è 9000 —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤...')
  
  // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 10.2025 (–∂–æ–≤—Ç–µ–Ω—å 2025)
  const startMonth = 10
  const startYear = 2025
  
  let totalCreated = 0
  const batchSize = 500
  
  // 18 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 500 –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ = 9000
  for (let i = 0; i < 18; i++) {
    const month = ((startMonth - 1 + i) % 12) + 1
    const year = startYear + Math.floor((startMonth - 1 + i) / 12)
    
    console.log(`\nüìÖ –°—Ç–≤–æ—Ä—é—î–º–æ 500 –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑–∞ ${month}.${year}...`)
    
    const candidates = []
    
    for (let j = 0; j < batchSize; j++) {
      const firstName = randomElement(firstNames)
      const lastName = randomElement(lastNames)
      const day = randomInt(1, 28)
      const createdDate = new Date(year, month - 1, day)
      
      candidates.push({
        branch: randomElement(branches),
        responsible: randomElement(responsiblePersons),
        firstName,
        lastName,
        phone: generatePhone(),
        age: randomInt(18, 55),
        candidateCountry: randomElement(candidateCountries),
        vacancyCountry: randomElement(countries),
        projectName: randomElement(projects),
        partnerNumber: `P${randomInt(1000, 9999)}`,
        arrivalDate: Math.random() > 0.5 ? new Date(year, month - 1, randomInt(1, 28)) : null,
        candidateStatus: randomElement(statuses),
        paymentAmount: Math.random() > 0.3 ? randomInt(1000, 5000) : 0,
        paymentStatus: Math.random() > 0.5 ? '–û—Ç—Ä–∏–º–∞–Ω–æ' : '–û—á—ñ–∫—É—î—Ç—å—Å—è',
        recipientType: randomElement(['–¢–û–í –ï–í', '–§–û–ü –ö–æ–∫—Ç–æ–≤', '–§–û–ü –õ–∏—Ç–≤–∏', '–¢–û–í –ü–µ—Ä—Å–æ–Ω–∞–ª–í–æ—Ä–∫']),
        comment: Math.random() > 0.7 ? `–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è ${firstName} ${lastName}` : null,
        createdAt: createdDate,
        updatedAt: createdDate,
      })
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞—Ç—á–∞–º–∏ –ø–æ 100 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    for (let k = 0; k < candidates.length; k += 100) {
      const batch = candidates.slice(k, k + 100)
      await prisma.candidate.createMany({
        data: batch,
      })
    }
    
    totalCreated += batchSize
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${batchSize} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ (–≤—Å—å–æ–≥–æ: ${totalCreated}/9000)`)
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –º—ñ—Å—è—Ü—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 100))
  }
  
  console.log(`\nüéâ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ${totalCreated} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤!`)
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = await prisma.candidate.groupBy({
    by: ['candidateStatus'],
    _count: true,
  })
  
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:')
  stats.forEach(stat => {
    console.log(`   ${stat.candidateStatus}: ${stat._count}`)
  })
}

main()
  .catch((e) => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

